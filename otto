## 第三方类库

### Otto
>用于控件的解耦 不相互依赖

#### 基本用法

引入
```android
dependencies {
  compile 'com.squareup:otto:1.3.8'
}
```

定义事件
```java
public class MessageEvent{
  /* Additional fields if needed */
}
```

订阅和取消
```java
bus.register(Context);//订阅
bus.unregister(Context);//取消订阅
```

发布
```java
bus.post(new MwssageEvent);
//可以是@Produce注解的方法
```

注解

**@Subscribe**:这个在调用了register后有效,表示订阅了一个事件,并且方法的用 public 修饰的.方法名可以随意取,重点是参数,它是根据你的参数进行判断是那个事件

**@Produce**注解告诉Bus该函数是一个事件产生者，产生的事件类型为该函数的返回值。post中传递的方法，返回值为定义的事件类

#### proguard 需要做一些额外处理，防止混淆

```java
-keepattributes *Annotation*
-keepclassmembers class ** {
    @com.squareup.otto.Subscribe public *;
    @com.squareup.otto.Produce public *;
}
```

>**otto**应用在主线程中，内部没有异步线程的场景。（解决UI的通信机制 轻量级）
