{
  "name": "Tmntduke",
  "tagline": "爱读书 爱音乐 爱编程",
  "body": "\r\n## 第三方类库\r\n\r\n### Otto\r\n>用于控件的解耦 不相互依赖\r\n\r\n#### 基本用法\r\n\r\n引入\r\n```android\r\ndependencies {\r\n  compile 'com.squareup:otto:1.3.8'\r\n}\r\n```\r\n\r\n定义事件\r\n```java\r\npublic class MessageEvent{\r\n  /* Additional fields if needed */\r\n}\r\n```\r\n\r\n订阅和取消\r\n```java\r\nbus.register(Context);//订阅\r\nbus.unregister(Context);//取消订阅\r\n```\r\n\r\n发布\r\n```java\r\nbus.post(new MwssageEvent);\r\n//可以是@Produce注解的方法\r\n```\r\n\r\n注解\r\n\r\n**@Subscribe**:这个在调用了register后有效,表示订阅了一个事件,并且方法的用 public 修饰的.方法名可以随意取,重点是参数,它是根据你的参数进行判断是那个事件\r\n\r\n**@Produce**注解告诉Bus该函数是一个事件产生者，产生的事件类型为该函数的返回值。post中传递的方法，返回值为定义的事件类\r\n\r\n#### proguard 需要做一些额外处理，防止混淆\r\n\r\n```java\r\n-keepattributes *Annotation*\r\n-keepclassmembers class ** {\r\n    @com.squareup.otto.Subscribe public *;\r\n    @com.squareup.otto.Produce public *;\r\n}\r\n```\r\n\r\n>**otto**应用在主线程中，内部没有异步线程的场景。（解决UI的通信机制 轻量级）",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}